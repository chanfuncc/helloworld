// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: common.proto

#include "common.pb.h"
#include "common.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace helloworld {

static const char* ClientService_method_names[] = {
  "/helloworld.ClientService/helloOfClient",
  "/helloworld.ClientService/ChangeConfig",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_helloOfClient_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeConfig_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::helloOfClient(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_helloOfClient_, context, request, response);
}

void ClientService::Stub::async::helloOfClient(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_helloOfClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::helloOfClient(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_helloOfClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* ClientService::Stub::PrepareAsynchelloOfClientRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::HelloReply, ::helloworld::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_helloOfClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* ClientService::Stub::AsynchelloOfClientRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchelloOfClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::ChangeConfig(::grpc::ClientContext* context, const ::helloworld::ConfigRequest& request, ::helloworld::ConfigReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::ConfigRequest, ::helloworld::ConfigReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeConfig_, context, request, response);
}

void ClientService::Stub::async::ChangeConfig(::grpc::ClientContext* context, const ::helloworld::ConfigRequest* request, ::helloworld::ConfigReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::ConfigRequest, ::helloworld::ConfigReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeConfig_, context, request, response, std::move(f));
}

void ClientService::Stub::async::ChangeConfig(::grpc::ClientContext* context, const ::helloworld::ConfigRequest* request, ::helloworld::ConfigReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConfigReply>* ClientService::Stub::PrepareAsyncChangeConfigRaw(::grpc::ClientContext* context, const ::helloworld::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::ConfigReply, ::helloworld::ConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConfigReply>* ClientService::Stub::AsyncChangeConfigRaw(::grpc::ClientContext* context, const ::helloworld::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::HelloRequest* req,
             ::helloworld::HelloReply* resp) {
               return service->helloOfClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::helloworld::ConfigRequest, ::helloworld::ConfigReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::ConfigRequest* req,
             ::helloworld::ConfigReply* resp) {
               return service->ChangeConfig(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::helloOfClient(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::ChangeConfig(::grpc::ServerContext* context, const ::helloworld::ConfigRequest* request, ::helloworld::ConfigReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


std::unique_ptr< ManagerService::Stub> ManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ManagerService::Stub> stub(new ManagerService::Stub(channel, options));
  return stub;
}

ManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

ManagerService::Service::Service() {
}

ManagerService::Service::~Service() {
}


static const char* ServerService_method_names[] = {
  "/helloworld.ServerService/helloOfServer",
  "/helloworld.ServerService/HeartBeat",
  "/helloworld.ServerService/BuildConnection",
};

std::unique_ptr< ServerService::Stub> ServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerService::Stub> stub(new ServerService::Stub(channel, options));
  return stub;
}

ServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_helloOfServer_(ServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HeartBeat_(ServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuildConnection_(ServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServerService::Stub::helloOfServer(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_helloOfServer_, context, request, response);
}

void ServerService::Stub::async::helloOfServer(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_helloOfServer_, context, request, response, std::move(f));
}

void ServerService::Stub::async::helloOfServer(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_helloOfServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* ServerService::Stub::PrepareAsynchelloOfServerRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::HelloReply, ::helloworld::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_helloOfServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* ServerService::Stub::AsynchelloOfServerRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchelloOfServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerService::Stub::HeartBeat(::grpc::ClientContext* context, const ::helloworld::HeartBeatReqeust& request, ::helloworld::HeartBeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::HeartBeatReqeust, ::helloworld::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HeartBeat_, context, request, response);
}

void ServerService::Stub::async::HeartBeat(::grpc::ClientContext* context, const ::helloworld::HeartBeatReqeust* request, ::helloworld::HeartBeatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::HeartBeatReqeust, ::helloworld::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeat_, context, request, response, std::move(f));
}

void ServerService::Stub::async::HeartBeat(::grpc::ClientContext* context, const ::helloworld::HeartBeatReqeust* request, ::helloworld::HeartBeatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HeartBeatReply>* ServerService::Stub::PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartBeatReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::HeartBeatReply, ::helloworld::HeartBeatReqeust, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HeartBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HeartBeatReply>* ServerService::Stub::AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartBeatReqeust& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerService::Stub::BuildConnection(::grpc::ClientContext* context, const ::helloworld::ConnRequest& request, ::helloworld::ConnReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::ConnRequest, ::helloworld::ConnReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuildConnection_, context, request, response);
}

void ServerService::Stub::async::BuildConnection(::grpc::ClientContext* context, const ::helloworld::ConnRequest* request, ::helloworld::ConnReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::ConnRequest, ::helloworld::ConnReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildConnection_, context, request, response, std::move(f));
}

void ServerService::Stub::async::BuildConnection(::grpc::ClientContext* context, const ::helloworld::ConnRequest* request, ::helloworld::ConnReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConnReply>* ServerService::Stub::PrepareAsyncBuildConnectionRaw(::grpc::ClientContext* context, const ::helloworld::ConnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::ConnReply, ::helloworld::ConnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuildConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConnReply>* ServerService::Stub::AsyncBuildConnectionRaw(::grpc::ClientContext* context, const ::helloworld::ConnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuildConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::helloworld::HelloRequest, ::helloworld::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::HelloRequest* req,
             ::helloworld::HelloReply* resp) {
               return service->helloOfServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::helloworld::HeartBeatReqeust, ::helloworld::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::HeartBeatReqeust* req,
             ::helloworld::HeartBeatReply* resp) {
               return service->HeartBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::helloworld::ConnRequest, ::helloworld::ConnReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::ConnRequest* req,
             ::helloworld::ConnReply* resp) {
               return service->BuildConnection(ctx, req, resp);
             }, this)));
}

ServerService::Service::~Service() {
}

::grpc::Status ServerService::Service::helloOfServer(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::HeartBeat(::grpc::ServerContext* context, const ::helloworld::HeartBeatReqeust* request, ::helloworld::HeartBeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::BuildConnection(::grpc::ServerContext* context, const ::helloworld::ConnRequest* request, ::helloworld::ConnReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace helloworld

