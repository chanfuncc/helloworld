// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace helloworld {
class ConfigReply;
struct ConfigReplyDefaultTypeInternal;
extern ConfigReplyDefaultTypeInternal _ConfigReply_default_instance_;
class ConfigRequest;
struct ConfigRequestDefaultTypeInternal;
extern ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
class ConnReply;
struct ConnReplyDefaultTypeInternal;
extern ConnReplyDefaultTypeInternal _ConnReply_default_instance_;
class ConnRequest;
struct ConnRequestDefaultTypeInternal;
extern ConnRequestDefaultTypeInternal _ConnRequest_default_instance_;
class HeartBeatReply;
struct HeartBeatReplyDefaultTypeInternal;
extern HeartBeatReplyDefaultTypeInternal _HeartBeatReply_default_instance_;
class HeartBeatReqeust;
struct HeartBeatReqeustDefaultTypeInternal;
extern HeartBeatReqeustDefaultTypeInternal _HeartBeatReqeust_default_instance_;
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class Statistics;
struct StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace helloworld
PROTOBUF_NAMESPACE_OPEN
template<> ::helloworld::ConfigReply* Arena::CreateMaybeMessage<::helloworld::ConfigReply>(Arena*);
template<> ::helloworld::ConfigRequest* Arena::CreateMaybeMessage<::helloworld::ConfigRequest>(Arena*);
template<> ::helloworld::ConnReply* Arena::CreateMaybeMessage<::helloworld::ConnReply>(Arena*);
template<> ::helloworld::ConnRequest* Arena::CreateMaybeMessage<::helloworld::ConnRequest>(Arena*);
template<> ::helloworld::HeartBeatReply* Arena::CreateMaybeMessage<::helloworld::HeartBeatReply>(Arena*);
template<> ::helloworld::HeartBeatReqeust* Arena::CreateMaybeMessage<::helloworld::HeartBeatReqeust>(Arena*);
template<> ::helloworld::HelloReply* Arena::CreateMaybeMessage<::helloworld::HelloReply>(Arena*);
template<> ::helloworld::HelloRequest* Arena::CreateMaybeMessage<::helloworld::HelloRequest>(Arena*);
template<> ::helloworld::Statistics* Arena::CreateMaybeMessage<::helloworld::Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helloworld {

enum StatusCode : int {
  OK = 0,
  PARAM_ERROR = 1,
  UNKNOWN_ERROR = 2,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = OK;
constexpr StatusCode StatusCode_MAX = UNKNOWN_ERROR;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor();
template<typename T>
inline const std::string& StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusCode_descriptor(), enum_t_value);
}
inline bool StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.ConfigRequest) */ {
 public:
  inline ConfigRequest() : ConfigRequest(nullptr) {}
  ~ConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR ConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigRequest(const ConfigRequest& from);
  ConfigRequest(ConfigRequest&& from) noexcept
    : ConfigRequest() {
    *this = ::std::move(from);
  }

  inline ConfigRequest& operator=(const ConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRequest& operator=(ConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigRequest*>(
               &_ConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigRequest& a, ConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigRequest& from) {
    ConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.ConfigRequest";
  }
  protected:
  explicit ConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 1,
    kNewValueFieldNumber = 2,
  };
  // repeated string attr = 1;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  const std::string& attr(int index) const;
  std::string* mutable_attr(int index);
  void set_attr(int index, const std::string& value);
  void set_attr(int index, std::string&& value);
  void set_attr(int index, const char* value);
  void set_attr(int index, const char* value, size_t size);
  std::string* add_attr();
  void add_attr(const std::string& value);
  void add_attr(std::string&& value);
  void add_attr(const char* value);
  void add_attr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attr();
  private:
  const std::string& _internal_attr(int index) const;
  std::string* _internal_add_attr();
  public:

  // repeated string newValue = 2;
  int newvalue_size() const;
  private:
  int _internal_newvalue_size() const;
  public:
  void clear_newvalue();
  const std::string& newvalue(int index) const;
  std::string* mutable_newvalue(int index);
  void set_newvalue(int index, const std::string& value);
  void set_newvalue(int index, std::string&& value);
  void set_newvalue(int index, const char* value);
  void set_newvalue(int index, const char* value, size_t size);
  std::string* add_newvalue();
  void add_newvalue(const std::string& value);
  void add_newvalue(std::string&& value);
  void add_newvalue(const char* value);
  void add_newvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& newvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_newvalue();
  private:
  const std::string& _internal_newvalue(int index) const;
  std::string* _internal_add_newvalue();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.ConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> newvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ConfigReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.ConfigReply) */ {
 public:
  inline ConfigReply() : ConfigReply(nullptr) {}
  ~ConfigReply() override;
  explicit PROTOBUF_CONSTEXPR ConfigReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigReply(const ConfigReply& from);
  ConfigReply(ConfigReply&& from) noexcept
    : ConfigReply() {
    *this = ::std::move(from);
  }

  inline ConfigReply& operator=(const ConfigReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigReply& operator=(ConfigReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigReply* internal_default_instance() {
    return reinterpret_cast<const ConfigReply*>(
               &_ConfigReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConfigReply& a, ConfigReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigReply& from) {
    ConfigReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.ConfigReply";
  }
  protected:
  explicit ConfigReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .helloworld.StatusCode code = 1;
  void clear_code();
  ::helloworld::StatusCode code() const;
  void set_code(::helloworld::StatusCode value);
  private:
  ::helloworld::StatusCode _internal_code() const;
  void _internal_set_code(::helloworld::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.ConfigReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:helloworld.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Statistics& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Statistics& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:helloworld.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatReqeust final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HeartBeatReqeust) */ {
 public:
  inline HeartBeatReqeust() : HeartBeatReqeust(nullptr) {}
  ~HeartBeatReqeust() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatReqeust(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatReqeust(const HeartBeatReqeust& from);
  HeartBeatReqeust(HeartBeatReqeust&& from) noexcept
    : HeartBeatReqeust() {
    *this = ::std::move(from);
  }

  inline HeartBeatReqeust& operator=(const HeartBeatReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatReqeust& operator=(HeartBeatReqeust&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatReqeust& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatReqeust* internal_default_instance() {
    return reinterpret_cast<const HeartBeatReqeust*>(
               &_HeartBeatReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HeartBeatReqeust& a, HeartBeatReqeust& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatReqeust* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatReqeust* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatReqeust* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatReqeust>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatReqeust& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatReqeust& from) {
    HeartBeatReqeust::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatReqeust* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HeartBeatReqeust";
  }
  protected:
  explicit HeartBeatReqeust(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateInfoFieldNumber = 1,
  };
  // .helloworld.Statistics state_info = 1;
  bool has_state_info() const;
  private:
  bool _internal_has_state_info() const;
  public:
  void clear_state_info();
  const ::helloworld::Statistics& state_info() const;
  PROTOBUF_NODISCARD ::helloworld::Statistics* release_state_info();
  ::helloworld::Statistics* mutable_state_info();
  void set_allocated_state_info(::helloworld::Statistics* state_info);
  private:
  const ::helloworld::Statistics& _internal_state_info() const;
  ::helloworld::Statistics* _internal_mutable_state_info();
  public:
  void unsafe_arena_set_allocated_state_info(
      ::helloworld::Statistics* state_info);
  ::helloworld::Statistics* unsafe_arena_release_state_info();

  // @@protoc_insertion_point(class_scope:helloworld.HeartBeatReqeust)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::helloworld::Statistics* state_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.HeartBeatReply) */ {
 public:
  inline HeartBeatReply() : HeartBeatReply(nullptr) {}
  ~HeartBeatReply() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatReply(const HeartBeatReply& from);
  HeartBeatReply(HeartBeatReply&& from) noexcept
    : HeartBeatReply() {
    *this = ::std::move(from);
  }

  inline HeartBeatReply& operator=(const HeartBeatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatReply& operator=(HeartBeatReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatReply* internal_default_instance() {
    return reinterpret_cast<const HeartBeatReply*>(
               &_HeartBeatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HeartBeatReply& a, HeartBeatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatReply& from) {
    HeartBeatReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.HeartBeatReply";
  }
  protected:
  explicit HeartBeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // .helloworld.StatusCode statusCode = 1;
  void clear_statuscode();
  ::helloworld::StatusCode statuscode() const;
  void set_statuscode(::helloworld::StatusCode value);
  private:
  ::helloworld::StatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::helloworld::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.HeartBeatReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int statuscode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ConnRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.ConnRequest) */ {
 public:
  inline ConnRequest() : ConnRequest(nullptr) {}
  ~ConnRequest() override;
  explicit PROTOBUF_CONSTEXPR ConnRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnRequest(const ConnRequest& from);
  ConnRequest(ConnRequest&& from) noexcept
    : ConnRequest() {
    *this = ::std::move(from);
  }

  inline ConnRequest& operator=(const ConnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnRequest& operator=(ConnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnRequest* internal_default_instance() {
    return reinterpret_cast<const ConnRequest*>(
               &_ConnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnRequest& a, ConnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnRequest& from) {
    ConnRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.ConnRequest";
  }
  protected:
  explicit ConnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.ConnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ConnReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.ConnReply) */ {
 public:
  inline ConnReply() : ConnReply(nullptr) {}
  ~ConnReply() override;
  explicit PROTOBUF_CONSTEXPR ConnReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnReply(const ConnReply& from);
  ConnReply(ConnReply&& from) noexcept
    : ConnReply() {
    *this = ::std::move(from);
  }

  inline ConnReply& operator=(const ConnReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnReply& operator=(ConnReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnReply* internal_default_instance() {
    return reinterpret_cast<const ConnReply*>(
               &_ConnReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConnReply& a, ConnReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnReply& from) {
    ConnReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.ConnReply";
  }
  protected:
  explicit ConnReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // .helloworld.StatusCode statusCode = 1;
  void clear_statuscode();
  ::helloworld::StatusCode statuscode() const;
  void set_statuscode(::helloworld::StatusCode value);
  private:
  ::helloworld::StatusCode _internal_statuscode() const;
  void _internal_set_statuscode(::helloworld::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:helloworld.ConnReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int statuscode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:helloworld.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string msg = 2;
inline void HelloReply::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& HelloReply::msg() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReply::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.msg)
}
inline std::string* HelloReply::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:helloworld.HelloReply.msg)
  return _s;
}
inline const std::string& HelloReply::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void HelloReply::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReply::release_msg() {
  // @@protoc_insertion_point(field_release:helloworld.HelloReply.msg)
  return _impl_.msg_.Release();
}
inline void HelloReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloReply.msg)
}

// -------------------------------------------------------------------

// ConfigRequest

// repeated string attr = 1;
inline int ConfigRequest::_internal_attr_size() const {
  return _impl_.attr_.size();
}
inline int ConfigRequest::attr_size() const {
  return _internal_attr_size();
}
inline void ConfigRequest::clear_attr() {
  _impl_.attr_.Clear();
}
inline std::string* ConfigRequest::add_attr() {
  std::string* _s = _internal_add_attr();
  // @@protoc_insertion_point(field_add_mutable:helloworld.ConfigRequest.attr)
  return _s;
}
inline const std::string& ConfigRequest::_internal_attr(int index) const {
  return _impl_.attr_.Get(index);
}
inline const std::string& ConfigRequest::attr(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.ConfigRequest.attr)
  return _internal_attr(index);
}
inline std::string* ConfigRequest::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.ConfigRequest.attr)
  return _impl_.attr_.Mutable(index);
}
inline void ConfigRequest::set_attr(int index, const std::string& value) {
  _impl_.attr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::set_attr(int index, std::string&& value) {
  _impl_.attr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::set_attr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::set_attr(int index, const char* value, size_t size) {
  _impl_.attr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.ConfigRequest.attr)
}
inline std::string* ConfigRequest::_internal_add_attr() {
  return _impl_.attr_.Add();
}
inline void ConfigRequest::add_attr(const std::string& value) {
  _impl_.attr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::add_attr(std::string&& value) {
  _impl_.attr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::add_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.ConfigRequest.attr)
}
inline void ConfigRequest::add_attr(const char* value, size_t size) {
  _impl_.attr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.ConfigRequest.attr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigRequest::attr() const {
  // @@protoc_insertion_point(field_list:helloworld.ConfigRequest.attr)
  return _impl_.attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigRequest::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.ConfigRequest.attr)
  return &_impl_.attr_;
}

// repeated string newValue = 2;
inline int ConfigRequest::_internal_newvalue_size() const {
  return _impl_.newvalue_.size();
}
inline int ConfigRequest::newvalue_size() const {
  return _internal_newvalue_size();
}
inline void ConfigRequest::clear_newvalue() {
  _impl_.newvalue_.Clear();
}
inline std::string* ConfigRequest::add_newvalue() {
  std::string* _s = _internal_add_newvalue();
  // @@protoc_insertion_point(field_add_mutable:helloworld.ConfigRequest.newValue)
  return _s;
}
inline const std::string& ConfigRequest::_internal_newvalue(int index) const {
  return _impl_.newvalue_.Get(index);
}
inline const std::string& ConfigRequest::newvalue(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.ConfigRequest.newValue)
  return _internal_newvalue(index);
}
inline std::string* ConfigRequest::mutable_newvalue(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.ConfigRequest.newValue)
  return _impl_.newvalue_.Mutable(index);
}
inline void ConfigRequest::set_newvalue(int index, const std::string& value) {
  _impl_.newvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::set_newvalue(int index, std::string&& value) {
  _impl_.newvalue_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::set_newvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.newvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::set_newvalue(int index, const char* value, size_t size) {
  _impl_.newvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.ConfigRequest.newValue)
}
inline std::string* ConfigRequest::_internal_add_newvalue() {
  return _impl_.newvalue_.Add();
}
inline void ConfigRequest::add_newvalue(const std::string& value) {
  _impl_.newvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::add_newvalue(std::string&& value) {
  _impl_.newvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::add_newvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.newvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.ConfigRequest.newValue)
}
inline void ConfigRequest::add_newvalue(const char* value, size_t size) {
  _impl_.newvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.ConfigRequest.newValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigRequest::newvalue() const {
  // @@protoc_insertion_point(field_list:helloworld.ConfigRequest.newValue)
  return _impl_.newvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigRequest::mutable_newvalue() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.ConfigRequest.newValue)
  return &_impl_.newvalue_;
}

// -------------------------------------------------------------------

// ConfigReply

// .helloworld.StatusCode code = 1;
inline void ConfigReply::clear_code() {
  _impl_.code_ = 0;
}
inline ::helloworld::StatusCode ConfigReply::_internal_code() const {
  return static_cast< ::helloworld::StatusCode >(_impl_.code_);
}
inline ::helloworld::StatusCode ConfigReply::code() const {
  // @@protoc_insertion_point(field_get:helloworld.ConfigReply.code)
  return _internal_code();
}
inline void ConfigReply::_internal_set_code(::helloworld::StatusCode value) {
  
  _impl_.code_ = value;
}
inline void ConfigReply::set_code(::helloworld::StatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:helloworld.ConfigReply.code)
}

// -------------------------------------------------------------------

// Statistics

// -------------------------------------------------------------------

// HeartBeatReqeust

// .helloworld.Statistics state_info = 1;
inline bool HeartBeatReqeust::_internal_has_state_info() const {
  return this != internal_default_instance() && _impl_.state_info_ != nullptr;
}
inline bool HeartBeatReqeust::has_state_info() const {
  return _internal_has_state_info();
}
inline void HeartBeatReqeust::clear_state_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_info_ != nullptr) {
    delete _impl_.state_info_;
  }
  _impl_.state_info_ = nullptr;
}
inline const ::helloworld::Statistics& HeartBeatReqeust::_internal_state_info() const {
  const ::helloworld::Statistics* p = _impl_.state_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::helloworld::Statistics&>(
      ::helloworld::_Statistics_default_instance_);
}
inline const ::helloworld::Statistics& HeartBeatReqeust::state_info() const {
  // @@protoc_insertion_point(field_get:helloworld.HeartBeatReqeust.state_info)
  return _internal_state_info();
}
inline void HeartBeatReqeust::unsafe_arena_set_allocated_state_info(
    ::helloworld::Statistics* state_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_info_);
  }
  _impl_.state_info_ = state_info;
  if (state_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:helloworld.HeartBeatReqeust.state_info)
}
inline ::helloworld::Statistics* HeartBeatReqeust::release_state_info() {
  
  ::helloworld::Statistics* temp = _impl_.state_info_;
  _impl_.state_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::helloworld::Statistics* HeartBeatReqeust::unsafe_arena_release_state_info() {
  // @@protoc_insertion_point(field_release:helloworld.HeartBeatReqeust.state_info)
  
  ::helloworld::Statistics* temp = _impl_.state_info_;
  _impl_.state_info_ = nullptr;
  return temp;
}
inline ::helloworld::Statistics* HeartBeatReqeust::_internal_mutable_state_info() {
  
  if (_impl_.state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::helloworld::Statistics>(GetArenaForAllocation());
    _impl_.state_info_ = p;
  }
  return _impl_.state_info_;
}
inline ::helloworld::Statistics* HeartBeatReqeust::mutable_state_info() {
  ::helloworld::Statistics* _msg = _internal_mutable_state_info();
  // @@protoc_insertion_point(field_mutable:helloworld.HeartBeatReqeust.state_info)
  return _msg;
}
inline void HeartBeatReqeust::set_allocated_state_info(::helloworld::Statistics* state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_info_;
  }
  if (state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state_info);
    if (message_arena != submessage_arena) {
      state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_info_ = state_info;
  // @@protoc_insertion_point(field_set_allocated:helloworld.HeartBeatReqeust.state_info)
}

// -------------------------------------------------------------------

// HeartBeatReply

// .helloworld.StatusCode statusCode = 1;
inline void HeartBeatReply::clear_statuscode() {
  _impl_.statuscode_ = 0;
}
inline ::helloworld::StatusCode HeartBeatReply::_internal_statuscode() const {
  return static_cast< ::helloworld::StatusCode >(_impl_.statuscode_);
}
inline ::helloworld::StatusCode HeartBeatReply::statuscode() const {
  // @@protoc_insertion_point(field_get:helloworld.HeartBeatReply.statusCode)
  return _internal_statuscode();
}
inline void HeartBeatReply::_internal_set_statuscode(::helloworld::StatusCode value) {
  
  _impl_.statuscode_ = value;
}
inline void HeartBeatReply::set_statuscode(::helloworld::StatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:helloworld.HeartBeatReply.statusCode)
}

// -------------------------------------------------------------------

// ConnRequest

// string ip = 1;
inline void ConnRequest::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ConnRequest::ip() const {
  // @@protoc_insertion_point(field_get:helloworld.ConnRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.ConnRequest.ip)
}
inline std::string* ConnRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:helloworld.ConnRequest.ip)
  return _s;
}
inline const std::string& ConnRequest::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ConnRequest::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnRequest::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnRequest::release_ip() {
  // @@protoc_insertion_point(field_release:helloworld.ConnRequest.ip)
  return _impl_.ip_.Release();
}
inline void ConnRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.ConnRequest.ip)
}

// uint32 port = 2;
inline void ConnRequest::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t ConnRequest::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ConnRequest::port() const {
  // @@protoc_insertion_point(field_get:helloworld.ConnRequest.port)
  return _internal_port();
}
inline void ConnRequest::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void ConnRequest::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:helloworld.ConnRequest.port)
}

// -------------------------------------------------------------------

// ConnReply

// .helloworld.StatusCode statusCode = 1;
inline void ConnReply::clear_statuscode() {
  _impl_.statuscode_ = 0;
}
inline ::helloworld::StatusCode ConnReply::_internal_statuscode() const {
  return static_cast< ::helloworld::StatusCode >(_impl_.statuscode_);
}
inline ::helloworld::StatusCode ConnReply::statuscode() const {
  // @@protoc_insertion_point(field_get:helloworld.ConnReply.statusCode)
  return _internal_statuscode();
}
inline void ConnReply::_internal_set_statuscode(::helloworld::StatusCode value) {
  
  _impl_.statuscode_ = value;
}
inline void ConnReply::set_statuscode(::helloworld::StatusCode value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:helloworld.ConnReply.statusCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::helloworld::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helloworld::StatusCode>() {
  return ::helloworld::StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
